'use strict';
var debug = require('debug')('basedata');
var util = require('util');
var fs = require('fs');
var path = require('path');
var async = require('async');
var tool = require('leaptool');

module.exports = function(app, module_name) {

  var block = {};
  
  // throw error if no user is logged in, otherwise continue next
  block.ensureUserLogin = function(req, res, next) {
    var callback = arguments[3] || null;
    var loginUser = req.session && req.session.user;
    if (loginUser) {
      next();
    } else {
      var message = 'user is not logged in';
      app.cb(new Error(message), null, { message:message }, req, res, callback);
    }
  };
  
  block.get = function(req, res, condition, filter, callback) {
    app.db.find(module_name, condition, filter, function(error, docs, info){
      app.cb(error, docs, info, req, res, callback);
    });
  };
  
  // method for route handling, condition and filter are derived from req object
  block.getWeb = function(req, res) {
    var callback = arguments[3] || null;
    var parameter = tool.getReqParameter(req);
    var condition = tool.getQueryCondition(parameter);
    var filter = tool.getQueryFilter(parameter);
    block.get(req, res, condition, filter, callback);
  };
    
  block.getById = function(req, res, id, callback) {
    var condition = { _id: id };
    var filter = {};
    app.db.find(module_name, condition, filter, function(error, docs, info){
      app.cb(error, docs, info, req, res, callback);
    });
  };
  
  block.getByIdWeb = function(req, res) {
    var callback = arguments[3] || null;
    var parameter = tool.getReqParameter(req);
    var id = parameter.id || parameter._id;
    block.getById(req, res, id, callback);
  };
  
  return block;
};